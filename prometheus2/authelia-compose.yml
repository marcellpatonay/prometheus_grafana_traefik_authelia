version: '3'

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.3
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker --metrics.prometheus=true --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
#      - ./traefik:/etc/traefik
    labels:
      - "providers.docker.tls.insecureSkipVerify=true"
    
  prometheus:
    image: prom/prometheus:v2.23.0
    container_name: prometheus
    volumes:
      - ./prometheus_conf:/etc/prometheus
      - ./prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - traefik
    expose:
      - 9090
    labels:
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"


  grafana:
    image: grafana/grafana:7.3.4
    container_name: grafana
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - traefik
      - prometheus
    expose:
      - 3000
    labels:
      - "traefik.http.routers.grafana.rule=Host(`grafana.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"

  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    volumes:
      - ./alertmanager_conf:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    depends_on:
      - traefik
      - prometheus
    expose:
      - 9093
    labels:
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"

  pushgateway:
    image: prom/pushgateway:v1.3.0
    container_name: pushgateway
    expose:
      - 9092
    labels:
      - "traefik.http.routers.pushgateway.rule=Host(`pushgateway.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.38.4
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8081
    labels:
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"
    depends_on:
      - prometheus

  nodeexporter:
    image: prom/node-exporter:v1.0.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    labels:
      - "traefik.http.routers.nodeexporter.rule=Host(`nodeexporter.docker.localhost`)"
      - "org.label-schema.group: 'monitoring'"
    depends_on:
       - prometheus

  authelia:
    image: authelia/authelia
    container_name: authelia
    command: --config /config/configuration.yml
    volumes:
      - ./authelia_conf/local:/config
    expose:
      - 9091
    labels:
      - "traefik.http.routers.authelia.rule=Host(`authelia.docker.localhost`)"
    depends_on: 
      - traefik


















#  whoami:
#    # A container that exposes an API to show its IP address
#    image: traefik/whoami
#    labels:
#      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"